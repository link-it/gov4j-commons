diff -urNbB cxf.orig/apiServiceImpl.mustache cxf/apiServiceImpl.mustache
--- cxf.orig/apiServiceImpl.mustache	2018-08-28 17:52:55.490053499 +0200
+++ cxf/apiServiceImpl.mustache	2018-08-29 09:52:16.297765208 +0200
@@ -3,23 +3,14 @@
 import {{package}}.*;
 {{#imports}}import {{import}};
 {{/imports}}
-
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.List;
-import java.util.Map;
-import javax.ws.rs.*;
-import javax.ws.rs.core.Response;
-import org.apache.cxf.jaxrs.model.wadl.Description;
-import org.apache.cxf.jaxrs.model.wadl.DocTarget;
-
-import org.apache.cxf.jaxrs.ext.multipart.*;
-
-import io.swagger.annotations.Api;
 {{#useSpringAnnotationConfig}}
 import org.springframework.stereotype.Service;
 {{/useSpringAnnotationConfig}}
-
+import org.opensiope.servlets.core.api.authorization.AuthorizationManager;
+import org.opensiope.servlets.core.api.exception.CodiceEccezione;
+import org.opensiope.servlets.core.api.impl.BaseImpl;
+import org.opensiope.servlets.core.api.impl.ServiceContext;
+import org.opensiope.servlets.core.listener.JPAContext;
 {{#useSpringAnnotationConfig}}
 @Service("{{classname}}")
 {{/useSpringAnnotationConfig}}
@@ -35,7 +26,12 @@
  *
  */
 {{/appName}}
-public class {{classname}}ServiceImpl implements {{classname}} {
+public class {{classname}}ServiceImpl extends BaseImpl implements {{classname}} {
+
+	public {{classname}}ServiceImpl(){
+		super(org.slf4j.LoggerFactory.getLogger({{classname}}ServiceImpl.class));
+	}
+
 {{#operations}}
 {{#operation}}
     {{#summary}}
@@ -48,10 +44,29 @@
      {{/notes}}
      */
     {{/summary}}
+	@Override
     public {{>returnTypes}} {{nickname}}({{#allParams}}{{>queryParamsImpl}}{{>pathParamsImpl}}{{>headerParamsImpl}}{{>bodyParamsImpl}}{{>formParamsImpl}}{{#has this 'more'}}, {{/has}}{{/allParams}}) {
+		ServiceContext context = this.getContext();
+		try {
+			context.getLogger().info("Invocazione in corso ...");     
+
+			AuthorizationManager.authorize(context, JPAContext.getJPAManager());
+			context.getLogger().debug("Autorizzazione completata con successo");     
+                        
         // TODO: Implement...
         
+			context.getLogger().info("Invocazione completata con successo");
         {{#useGenericResponse}}return Response.ok().entity("magic!").build();{{/useGenericResponse}}{{^useGenericResponse}}{{^vendorExtensions.x-java-is-response-void}}return null;{{/vendorExtensions.x-java-is-response-void}}{{/useGenericResponse}}
+     
+		}
+		catch(javax.ws.rs.WebApplicationException e) {
+			context.getLogger().error("Invocazione terminata con errore '4xx': %s",e, e.getMessage());
+			throw e;
+		}
+		catch(Exception e) {
+			context.getLogger().error("Invocazione terminata con errore: %s",e, e.getMessage());
+			throw CodiceEccezione.ERRORE_INTERNO.toException(e);
+		}
     }
     
 {{/operation}}
